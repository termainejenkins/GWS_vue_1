// src/backend/workers/monsterWorker.ts
import debug from 'debug'
import playwright from 'playwright'
import { chromium } from 'playwright'; 
import retry from 'async-retry'

const browser = await chromium.launch();
const page = await browser.newPage();



// locators
  const jobList = page.locator('.jobs-list-item .information a')
  const jobTitle = page.getByTestId('jobTitle')
  const rawText = page.getByText('DescriptionJob')
  const nextButton = page.getByRole('button', {name: 'View next page'})
  const previousButton = page.getByRole('button', {name: 'View previous page'})



  //const nextButton = page.locator('.pagination_click')       //('div.pagination-block au-target')      //('#next')

async function main() {
  const jobsOnPage = await jobList.count();
  const response: { title: string; url: string}[] = [];
  console.log('Launching browser with headless mode:', headless);

  for (let i = 0; i < jobsOnPage; i++) {
    const listing = jobList.nth(i);

    const jobListing = listing.innerText();

    const url = await listing.evaluate((link) => link.href);

    const title = await listing.evaluate((link) => link.innerText);

    response.push({
      title,
      url,
    });
  }

  return response;
}


await retry(main, {
  retries: 3,
  onRetry: (err) => {
    console.log(`Retrying in 1 second... ${err.message}`);
  },
});


// if (debug) {
//   await page.pause();
// }

// main().catch((err) => {
//   console.error(err.stack || err);
//   process.exit(1);
// });


await page.goto("https://monster.com", {
  waitUntil: "networkidle",
});
console.log('Arrived at monster.com')
  while (true) {
    await main()
    if (debug) {
      await page.pause()
    }
    if (!!await nextButton.count()) {
      const nextUrl = await nextButton.evaluate((link) => link.href) as string
      await Promise.all([
        page.waitForURL(nextUrl, {waitUntil: 'networkidle'}),
        nextButton.click(),
      ])
    } else {
      break
    }
    return response
  }
